# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Copy application.yml into runner
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
          touch ./src/main/resources/application-db.yml
          touch ./src/main/resources/application-local.yml
          echo "${{secrets.APPLICATION}}" > ./src/main/resources/application.yml
          echo "${{secrets.APPLICATION_DB}}" > ./src/main/resources/application-db.yml
          echo "${{secrets.APPLICATION_LOCAL}}" > ./src/main/resources/application-local.yml

      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      # 🚀 배포 시작 알림
      - name: Discord - Deployment Started
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          START_TIME=$(date)
          
          curl -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"🚀 배포 시작\",
                  \"color\": 3447003,
                  \"fields\": [
                    {\"name\": \"👤 배포자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                    {\"name\": \"🌿 브랜치\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                    {\"name\": \"📝 커밋\", \"value\": \"[\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
                    {\"name\": \"⏰ 시작 시간\", \"value\": \"${START_TIME}\", \"inline\": false}
                  ],
                  \"timestamp\": \"${TIMESTAMP}\"
                }]
              }" \
                $DISCORD_WEBHOOK_URL

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      # CD
      - name: docker image build
        run: docker build --platform linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/dreaming_library .

        # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: docker Hub push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/dreaming_library

      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            docker rmi ${{ secrets.DOCKER_USERNAME }}/dreaming_library || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/dreaming_library
            docker stop dreaming_library || true
            docker rm dreaming_library || true
            docker run -d --name dreaming_library -p 7000:8080 \
              -e SENTRY_DSN="${{ secrets.SENTRY_DSN }}" \
              -e SPRING_PROFILES_ACTIVE="prod" \
              ${{ secrets.DOCKER_USERNAME }}/dreaming_library

      # ✅ 배포 성공 알림
      - name: Discord - Deployment Success
        if: success()
        run: |
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          COMPLETE_TIME=$(date)
          
          curl -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"✅ 배포 성공\",
                  \"color\": 65280,
                  \"fields\": [
                    {\"name\": \"👤 배포자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                    {\"name\": \"🌿 브랜치\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                    {\"name\": \"📝 커밋\", \"value\": \"[\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
                    {\"name\": \"⏰ 완료 시간\", \"value\": \"${COMPLETE_TIME}\", \"inline\": false},
                    {\"name\": \"🔗 서비스\", \"value\": \"[바로가기](http://your-server-url:7000)\", \"inline\": false}
                  ],
                  \"timestamp\": \"${TIMESTAMP}\"
                }]
              }" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

      # ❌ 배포 실패 알림
      - name: Discord - Deployment Failed
        if: failure()
        run: |
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          FAIL_TIME=$(date)
          
          curl -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"❌ 배포 실패\",
                  \"color\": 16711680,
                  \"fields\": [
                    {\"name\": \"👤 배포자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                    {\"name\": \"🌿 브랜치\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                    {\"name\": \"📝 커밋\", \"value\": \"[\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
                    {\"name\": \"⏰ 실패 시간\", \"value\": \"${FAIL_TIME}\", \"inline\": false},
                    {\"name\": \"🔍 로그\", \"value\": \"[${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\", \"inline\": false}
                  ],
                  \"timestamp\": \"${TIMESTAMP}\"
                }]
              }" \
              ${{ secrets.DISCORD_WEBHOOK_URL }}

  

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
